:host ::ng-deep .custom-spinner .p-progress-spinner-circle {
  animation: custom-progress-spinner-dash 1.5s ease-in-out infinite, custom-progress-spinner-color 6s ease-in-out infinite;
}

@keyframes custom-progress-spinner-color {
  100%,
  0% {
      stroke: var(--primary-color);
  }
  40% {
      stroke: var(--secondary-color);
  }
  66% {
    stroke: var(--primary-color);
  }
  80%,
  90% {
    stroke: var(--secondary-color);
  }
}

@keyframes custom-progress-spinner-dash {
  0% {
      stroke-dasharray: 1, 200;
      stroke-dashoffset: 0;
  }
  50% {
      stroke-dasharray: 89, 200;
      stroke-dashoffset: -35px;
  }
  100% {
      stroke-dasharray: 89, 200;
      stroke-dashoffset: -124px;
  }
}

@keyframes enter {
    from {
        color: transparent;
    }
    to {
        color: var(--text-color);
    }
}

@keyframes leave {
    from {
        color: var(--text-color);
    }
    to {
        color: transparent;
    }
}


@keyframes blink {
  0% {
    color: var(--text-color);
    opacity: .2;
  }
  20% {
    color: var(--text-color);
    opacity: .4;
  }
  40% {
    color: var(--text-color);
    opacity: 0.6;
  }
  60% {
    color: var(--text-color);
    opacity: 1;
  }
  80% {
    color: var(--text-color);
    opacity: .8;
  }
  100% {
    color: var(--text-color);
    opacity: .2;
  }
}
.saving-color{
  color: var(--text-color);
}
.saving span {
  animation-name: blink;
  animation-duration: 1.4s;
  animation-iteration-count: infinite;
  animation-fill-mode: both;

}

.saving span:nth-child(2) {
  animation-delay: .2s;
}
.saving span:nth-child(3) {
  animation-delay: .4s;
}
.saving span:nth-child(4) {
  animation-delay: .6s;
}
.saving span:nth-child(5) {
  animation-delay: .8s;
}
.saving span:nth-child(6) {
  animation-delay: 1.0s;
}
.saving span:nth-child(7) {
  animation-delay: 1.2s;
}
.saving span:nth-child(8) {
  animation-delay: 1.4s;
}
.saving span:nth-child(9) {
  animation-delay: 1.6s;
}
.saving span:nth-child(10) {
  animation-delay: 1.8s;
}



.loader-container {
  display: flex !important;
  justify-content: center !important;
  height: -webkit-fill-available !important;
  align-items: center !important;
  width: -webkit-fill-available !important;
  cursor: wait;
  background-color: pink;
}

.loader-container-center {
  position: relative;
  text-align: center;
  width: auto;
}

$size : 30px;
$yellow_light : #FED750;
$yellow : #E6A32F;
$yellow_dark : #C87932;
$duration : 2s;

/* html, body { height: 100%; }
body {
  display: flex;
  justify-content: center;
  align-items: center;
  background:
    radial-gradient(

      #333,
      #000
    );
  transform: translateY(-$size*1.5);
}
 */
@mixin psuedo {
  display: block;
  content: "";
}

.loading-message {
  display: inline-flex;
  flex-wrap: wrap;
  transform-style: preserve-3d;
  margin:2rem;
  font-weight:500;
  text-align: center;
  font-size: 2rem;
}
.loader {
  display: inline-flex;
  flex-wrap: wrap;
  width: $size * 3;
  height: $size * 3;
  transform-style: preserve-3d;
  transform: rotateX(45deg) rotate(45deg);
}


.box {
  position: absolute;
  top: 0;
  left: 0;
  width: $size;
  height: $size;
  background: $yellow_light;
  box-shadow: $size*3.75 $size*3.75 20px #000;
  animation: move $duration ease-in-out infinite both;
  transform-style: preserve-3d;

  @for $i from 1 through 3 {
    /* &:nth-child(#{$i}) {
      //animation-delay: $i/2 * -$duration;
    } */
  }

  &:before,
  &:after {
    @include psuedo;
    position: absolute;
    width: $size;
    height: $size;
  }

  &:before {
    top: 100%;
    left: 0;
    background: $yellow;
    transform-origin: center top;
    transform: rotateX(-90deg);
  }

  &:after {
    top: 0;
    left: 100%;
    background: $yellow_dark;
    transform-origin: center left;
    transform: rotateY(90deg);
  }
}

@keyframes move {

  0%,
  100% {
    transform: none;
  }

  12.5% {
    transform: translate($size, 0);
  }

  25% {
    transform: translate($size*2, 0);
  }

  37.5% {
    transform: translate($size*2, $size);
  }

  50% {
    transform: translate($size*2, $size*2);
  }

  62.5% {
    transform: translate($size, $size*2);
  }

  75% {
    transform: translate(0, $size*2);
  }

  87.5% {
    transform: translate(0, $size);
  }
}
